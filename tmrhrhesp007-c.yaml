esphome:
  name: tmrhrhesp007-c

# https://github.com/esphome/esphome.git#2022.10.1

esp32:
  board: esp32cam
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "Pd+HDHu9mIFWMEeoQ+AuJbK66ItDenxSfys1sKicgXo="

ota:
  password: "eff289fc1940e92b40d2c6cc41ba717a"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
#   ap:
#     ssid: "Tmrhrhesp007-C Fallback Hotspot"
#     password: "JE9aY3bJY3Ru"

# captive_portal:
    
web_server:
  port: 80
  include_internal: True

button:
  - platform: restart
    name: "TMRHRHESP007 Restart"
  # - platform: shutdown
  #   name: "TMRHRHESP007 Shutdown"

# sensor:
#   - platform: uptime
#     name: TMRHRHESP007 Uptime
#   - platform: wifi_signal
#     name: "TMRHRHESP007 WiFi Signal Sensor"

text_sensor:
  - platform: version
    name: "TMRHRHESP007 Version"

# esp32_camera_web_server:
#   - port: 8080
#     mode: stream
#   - port: 8081
#     mode: snapshot

# esp32_camera:
#   external_clock:
#     pin: GPIO0
#     frequency: 20MHz
#   i2c_pins:
#     sda: GPIO26
#     scl: GPIO27
#   data_pins: [GPIO5, GPIO18, GPIO19, GPIO21, GPIO36, GPIO39, GPIO34, GPIO35]
#   vsync_pin: GPIO25
#   href_pin: GPIO23
#   pixel_clock_pin: GPIO22
#   power_down_pin: GPIO32
#   # Image settings
#   name: TMRHRHESP007 Camera
#   resolution: 640X480

# light:
#   - platform: binary
#     name: "TMRHRHESP007 Flash"
#     output: light_output

# output:
#   - id: light_output
#     platform: gpio
#     pin: GPIO4

esp32_ble_tracker:

ble_client:
  - mac_address: BE:FF:C2:32:EF:5E
    id: led_bar
    name: "TMRHRHESP007 LED Bar"
    on_connect: 
        - esp32_ble_tracker.stop_scan: 
    on_disconnect: 
        - esp32_ble_tracker.start_scan:

switch:
  - platform: template
    name: "LED Bar"
    id: led_bar_switch
    assumed_state: true
    turn_on_action:
      - lambda: |-
            id(led_bar_switch).publish_state(true);
      - ble_client.ble_write:
          id: led_bar
          service_uuid: "FFF0"
          characteristic_uuid: "FFF3"
          # List of bytes to write.
          value: [0x7e, 00, 04, 01, 00, 00, 00, 00, 0xef]
    turn_off_action:
      - lambda: |-
          id(led_bar_switch).publish_state(false);
      - ble_client.ble_write:
          id: led_bar
          service_uuid: "FFF0"
          characteristic_uuid: "FFF3"
          # List of bytes to write.
          value: [0x7e, 00, 04, 00, 00, 00, 00, 00, 0xef]