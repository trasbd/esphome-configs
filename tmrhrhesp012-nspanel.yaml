# Set some variables for convenience
substitutions:
  deviceNumber: "12"
  devicename: tmrhrhesp0$deviceNumber
  deviceIP: 192.168.86.2$deviceNumber
  node_name: $devicename
  device_name: $devicename

esphome:
  name: $node_name
  comment: $device_name
  on_boot:
    priority: 601
    then:
      - lambda: id(disp1).send_command_printf("DRAKJHSUYDGBNCJHGJKSHBDN");

esp32:
  board: esp32dev

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  manual_ip:
     static_ip: $deviceIP
     gateway: 192.168.86.1
     subnet: 255.255.0.0
     dns1: 192.168.86.46
     
web_server:
  port: 80
  include_internal: True

# Enable logging
logger:

# Enable wireless updates
ota:
  - platform: esphome
    password: "804c6867374e8fad47adde1dc52a3a01"

# Enable Home Assistant API
api:
  encryption:
    key: "2d4ERfG1Tjofqwfj6FuPRRgbjqe+zzso5xuuhpXoqes="
  services:
    # Service to play a song
    - service: play_rtttl
      variables:
        song_str: string
      then:
        - rtttl.play:
            rtttl: !lambda 'return song_str;'
    - service: upload_tft
      then:
        - button.press: tft_upload

# A reboot button is always useful
button:
  - platform: restart
    name: Restart $device_name

  - platform: template
    name: "TFT Upload"
    id: tft_upload
    on_press: 
      then:
        - lambda: 'id(disp1)->upload_tft();'
            

  - platform: template
    name: "rtttl Song"
    id: rtttl_song_button
    on_press:
      - rtttl.play: "twobits:d=4,o=5,b=220:c6,8g,8g,a,g,p,b,c6"

# Define some inputs
binary_sensor:
  - platform: gpio
    name: $device_name Left Button
    pin:
      number: 14
      inverted: true
    on_click:
      - switch.toggle: left_switch_state_panel

  - platform: gpio
    name: $device_name Right Button
    pin:
      number: 27
      inverted: true
    on_click:
      - switch.toggle: right_switch_state_panel



sensor:
  - platform: wifi_signal
    name: $device_name WiFi Signal
    update_interval: 60s

  - platform: ntc
    id: temperature
    sensor: resistance_sensor
    calibration:
      b_constant: 3950
      reference_temperature: 25Â°C
      reference_resistance: 10kOhm
    name: $device_name Temperature
    on_value:
      # Push it to the display
      then:
        - lambda: |-
            id(disp1).set_component_text_printf("main.txtInsideTemp", "\x09""%.1f""\xb0""F", (x*9/5)+32);
            

  - platform: resistance
    id: resistance_sensor
    sensor: ntc_source
    configuration: DOWNSTREAM
    resistor: 11.2kOhm

  - platform: adc
    id: ntc_source
    pin: 38
    update_interval: 10s
    attenuation: 11db

  # Grab current temperature from Home Assistant
  - platform: homeassistant
    id: current_temperature
    entity_id: weather.home
    attribute: temperature
    on_value:
      # Push it to the display
      then:
        - lambda: |-
            id(disp1).set_component_text_printf("main.txtOutsideTemp", "%.0f""\xb0""F", x);

  - platform: nextion
    id: cat_button
    internal: False
    component_id: 7
    on_value: 
      then:
      - rtttl.play: "Titanic:d=8,o=6,b=120,b=120:c,d,2e.,d,c,d,g,2g,f,e,4c,2a5,g5,f5,16d5,16e5,2d5,p,c,d,2e.,d,c,d,g,2g,e,g,2a,2g,16d,16e,2d."
#      - rtttl.play: "Entertainer:d=8,o=5,b=140,b=140:d,d#,e,4c6,e,4c6,e,2c6.,c6,d6,d#6,e6,c6,d6,4e6,b,4d6,2c6,4p,d,d#,e,4c6,e,4c6,e,2c6.,p,a,g,f#,a,c6,4e6,d6,c6,a,2d6"
        
            

time:
  - platform: homeassistant
    id: homeassistant_time
    on_time:
      - seconds: 0
        minutes: /1
        then:
          - lambda: |-
              id(disp1).set_component_text_printf("main.txtTime", "%02i:%02i", id(homeassistant_time).now().hour, id(homeassistant_time).now().minute);

# Define some outputs

fan:
  - platform: binary
    output: relay_1_output
    id: relay_1
    name: $device_name Bedroom Ceiling Fan

light:
  - platform: binary
    output: relay_2_output
    id: relay_2
    name: $device_name Bedroom Ceiling Light

switch:
  # Pin 4 always needs to be on to power up the display
  - platform: gpio
    id: screen_power
    entity_category: config
    pin:
      number: 4
      inverted: true
    restore_mode: ALWAYS_ON

  #-------------------------------------------------
  # Left switch state (from panel)
  #-------------------------------------------------  
  - platform: nextion
    internal: true
    id: left_switch_state_panel
    component_name: btnLightLeft
    on_turn_on:
      - fan.turn_on: relay_1
    on_turn_off:
      - fan.turn_off: relay_1
        
  #-------------------------------------------------
  # Right switch state (from panel)
  #-------------------------------------------------  
  - platform: nextion
    internal: true
    id: right_switch_state_panel
    component_name: btnLightRight
    on_turn_on:
      - light.turn_on: relay_2
    on_turn_off:
      - light.turn_off: relay_2

number:
  platform: template
  name: $device_name Brightness
  id: brightness
  entity_category: config
  unit_of_measurement: '%'
  min_value: 0
  max_value: 100
  step: 1
  initial_value: 30
  optimistic: True
  on_value:
    then:
      - lambda: 'id(disp1).set_backlight_brightness(x/100);'

# Configure the internal bleeper
output:
  - platform: ledc
    id: buzzer_out
    pin:
      number: 21

  # The two relays
  - platform: gpio
    id: relay_1_output
    pin:
      number: 22

  - platform: gpio
    id: relay_2_output
    pin:
      number: 19

# Enable ringtone music support
rtttl:
  id: buzzer
  output: buzzer_out

# Configure UART for communicating with the screen
uart:
  id: tf_uart
  tx_pin: 16
  rx_pin: 17
  baud_rate: 115200

# Configure the screen itself
display:
  - platform: nextion
    id: disp1
    uart_id: tf_uart
    tft_url: http://homeassistant.local:8123/local/bathroom.tft
    # A little fun...
    on_setup:
      then:
        - number.set:
            id: brightness
            value: 30
        - lambda: |-
            id(disp1).send_command_printf("DRAKJHSUYDGBNCJHGJKSHBDN");
            id(disp1).send_command_printf("page main");
            id(disp1).set_component_text_printf("btnLightLeft","%s", "Fan (15min)");
            id(disp1).set_component_text_printf("btnLightRight","%s", "Light");
        - button.press: rtttl_song_button
    on_page:
      then:
        lambda: |-
          switch (x) {
            case 0x02: // wifi_qr_page
              // Manually trigger update for controls on page 0x02 here
              
              break;
          }

text_sensor:

  #-------------------------------------------------
  # Left switch entity updates (From home assistant)
  #-------------------------------------------------
  - platform: homeassistant
    internal: true
    entity_id: fan.tmrhrhesp012_bedroom_ceiling_fan
    id: left_switch_state_ha
    on_value:
      then:
        - lambda: |-
            if(x=="on") {
              //id(disp1).send_command_printf("btnLightLeft.val=1");
              id(left_switch_state_panel).turn_on();
            } else {
              //id(disp1).send_command_printf("btnLightLeft.val=0");
              id(left_switch_state_panel).turn_off();
            }

  #-------------------------------------------------
  # Right switch entity updates (From home assistant)
  #-------------------------------------------------
  - platform: homeassistant
    internal: true
    entity_id: light.tmrhrhesp012_bedroom_ceiling_light
    id: right_switch_state_ha
    on_value:
      then:
        - lambda: |-
            if(x=="on") {
              //id(disp1).send_command_printf("btnLightRight.val=1");
              id(right_switch_state_panel).turn_on();
              
            } else {
              //id(disp1).send_command_printf("btnLightRight.val=0");
              id(right_switch_state_panel).turn_off();
            }

  #-------------------------------------------------
  # Sun state (From home assistant)
  #-------------------------------------------------
  - platform: homeassistant
    id: sun_state
    entity_id: sun.sun
    on_value:
      then:
        - script.execute: update_weather_icon
            


  #-------------------------------------------------
  # Weather symbol (From home assistant)
  #-------------------------------------------------
  - platform: homeassistant
    id: weather_symbol
    entity_id: weather.home
    on_value:
      then:
        - script.execute: update_weather_icon



  - platform: template
    update_interval: 5s
    name: IP Address
    internal: True
    lambda: |-
      id(disp1).set_component_text_printf("about.static_ip", "%s", WiFi.localIP().toString().c_str());
      return {WiFi.localIP().toString().c_str()};


#####################################################################
#
# Scripts
#
#####################################################################
script:
  id: update_weather_icon
  
  then:
    - lambda: |-

        int imgOffset = 0; //22
        int icon_id=imgOffset+17; /// unknown state
        
        if(id(weather_symbol).state == "clear-night") {
          icon_id=imgOffset+4;
          
        } else if(id(weather_symbol).state == "cloudy") {
          icon_id=imgOffset+5;
          
        } if(id(weather_symbol).state == "exceptional") {
          icon_id=imgOffset+6;
          
        } if(id(weather_symbol).state == "fog") {
          icon_id=imgOffset+7;
          
        } if(id(weather_symbol).state == "hail") {
          icon_id=imgOffset+8;
          
        } if(id(weather_symbol).state == "lightning") {
          icon_id=imgOffset+9;
          
        } if(id(weather_symbol).state == "lightning-rainy") {
          icon_id=imgOffset+10;
          
        } if(id(weather_symbol).state == "partlycloudy") {
          if(id(sun_state).state == "below_horizon") {
            icon_id=imgOffset+20;
          } else {
            icon_id=imgOffset+11;
          }
          
        } if(id(weather_symbol).state == "pouring") {
          icon_id=imgOffset+12;
          
        } if(id(weather_symbol).state == "rainy") {
          icon_id=imgOffset+13;
          
        } if(id(weather_symbol).state == "snowy") {
          icon_id=imgOffset+14;
          
        } if(id(weather_symbol).state == "snowy-rainy") {
          icon_id=imgOffset+15;
          
        } if(id(weather_symbol).state == "sunny") {
          if(id(sun_state).state == "below_horizon") {
            icon_id=imgOffset+4;
            
          } else {
            icon_id=imgOffset+16; 
          }
          
        } if(id(weather_symbol).state == "windy") {
          icon_id=imgOffset+18;
          
        } if(id(weather_symbol).state == "windy-variant") {
          icon_id=imgOffset+19;
        }
        
        id(disp1).send_command_printf("main.picWeatherIcon.pic=%i", icon_id);
        id(disp1).send_command_printf("selectFanSpeed.picWeatherIcon.pic=%i", icon_id);
        id(disp1).send_command_printf("selectMode.picWeatherIcon.pic=%i", icon_id);      
